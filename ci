#!/bin/bash -e
BASE_DIR=$(dirname "${0}")

source "${BASE_DIR}/lib/actions"
source "${BASE_DIR}/lib/checks"
source "${BASE_DIR}/lib/colours"
source "${BASE_DIR}/lib/help"
source "${BASE_DIR}/lib/messages"

# Language (force it so getopt messages are always in english, as the script)
LANG=en_EN

# Get script name
SCRIPT=$(basename ${0})

# Supported distributions and PostgreSQL versions
SUPPORTEDDISTROS="centos7 ubuntu18.04 ubuntu20.04"
SUPPORTEDPGVERS="9.5 9.6 10 11 12 13"

# read the options
ARGS=$(getopt -o h --long help,action:,distro:,pgver:,tdsdir:,mssqlhost:,mssqlport:,mssqldb:,mssqluser:,mssqlpass:,postgresdb:,postgresuser:,postgrespass:,max_retries:,wait_sec:,unattended_debugging -n "${SCRIPT}" -- "$@")
if [ $? -ne 0 ];
then
  print_incorrect_syntax
  exit 1
fi
eval set -- "${ARGS}"

# extract options and their arguments into variables
while true ; do
  case "${1}" in
    -h|--help)              help "${SUPPORTEDPGVERS}" "${SUPPORTEDDISTROS}"; exit 1;;
    --action)               ACTION="${2}"; shift 2;;
    --distro)               export DISTRO="${2}"; shift 2;;
    --pgver)                export PG_VER="${2}"; shift 2;;
    --tdsdir)               export TDSDIR="${2}"; shift 2;;
    --mssqlhost)            export MSSQLHOST="${2}"; shift 2;;
    --mssqlport)            export MSSQLPORT="${2}"; shift 2;;
    --mssqldb)              export MSSQLDB="${2}"; shift 2;;
    --mssqluser)            export MSSQLUSER="${2}"; shift 2;;
    --mssqlpass)            export MSSQLPASS="${2}"; shift 2;;
    --postgreshost)         export POSTGRESHOST="${2}"; shift 2;;
    --postgresport)         export POSTGRESPORT="${2}"; shift 2;;
    --postgresdb)           export POSTGRESDB="${2}"; shift 2;;
    --postgresuser)         export POSTGRESUSER="${2}"; shift 2;;
    --postgrespass)         export POSTGRESPASS="${2}"; shift 2;;
    --max_retries)          export MAX_RETRIES="${2}"; shift 2;;
    --wait_sec)             export WAIT_SEC="${2}"; shift 2;;
    --unattended_debugging) export UNATTENDED_DEBUG="TRUE"; shift 1;;
    --) shift ; break ;;
    *) print_incorrect_syntax; exit 1;;
  esac
done

# Check arguments for actions
case "${ACTION}" in
  get_info) ;;
  mod_build)  if [ -z "${TDSDIR}" ]; then print_incorrect_syntax; exit 1;
              elif [ ! -d ${TDSDIR} ]; then
                print_error_folder_doesnt_exist "${TSDIR}"
                exit 1
              fi;;
  mod_install) if [ -z "${TDSDIR}" ]; then print_incorrect_syntax; exit 1;
               elif [ ! -d ${TDSDIR} ]; then
                print_error_folder_doesnt_exist "${TSDIR}"
                exit 1
               fi;;
  pg_stop) ;;
  pg_start) ;;
  pg_confdb)  if ! $(check_postgres_vars); then
                print_incorrect_syntax
                exit 1
              fi;;
  mssql_test) if ! $(check_postgres_vars) && ! $(check_mssql_vars); then
                print_incorrect_syntax
                exit 1
              elif [ -z "${TDSDIR}" ]; then print_incorrect_syntax; exit 1;
              elif [ ! -d ${TDSDIR} ]; then
                print_error_folder_doesnt_exist "${TSDIR}"
                exit 1
              fi;;
  pg_test)    if ! $(check_postgres_vars); then
                print_incorrect_syntax
                exit 1
              elif [ -z "${TDSDIR}" ]; then print_incorrect_syntax; exit 1;
              elif [ ! -d ${TDSDIR} ]; then
                print_error_folder_doesnt_exist "${TSDIR}"
                exit 1
              fi;;
  pg_dropdb)  if ! $(check_postgres_vars); then
                print_incorrect_syntax
                exit 1
              fi;;
  *) print_error_unknown_action
     exit 1;
esac

export PG_VER_FULL="${PG_VER}"
export SHORTVER_FULL="$(echo ${PG_VER}|tr -d '.')"

# Check PostgreSQL version
PG_VER="$(check_pgver)"
if [ "${PG_VER}" == "" ]; then
  print_error_unknown_unsupported_pgver
  exit 1
fi

export PG_VER="${PG_VER/-testing}"
export SHORTVER="${SHORTVER_FULL/-testing}"

# Check distribution
export DISTRO="$(detect_distro)"
if [ "${DISTRO}" == "" ]; then
  print_error_unsupported_distro
  exit 1
fi
export SHORTDISTRO="$(echo ${DISTRO}|tr -d '.')"

# End setting variables to be passed to the jail
export POSTGRESSCHEMA="postgresql${SHORTVER_FULL/-}_${SHORTDISTRO}_test"
export MSSQLSCHEMA="${POSTGRESSCHEMA}"
if [[ "${DISTRO}" =~ ^centos[0-9]$ ]]; then
  export PGBIN_PATH="/usr/pgsql-${PG_VER}/bin"
  export POSTGRESPORT=$(sed -n 's/^port = \([0-9]*\).*/\1/p' /var/lib/pgsql/${PG_VER}/data/postgresql.conf)
elif [[ "${DISTRO}" =~ ^ubuntu[0-9]{2}.[0-9]{2}$ ]]; then
  export PGBIN_PATH="/usr/lib/postgresql/${PG_VER}/bin"
  export POSTGRESPORT=$(sed -n 's/^port = \([0-9]*\).*/\1/p' /etc/postgresql/${PG_VER}/main/postgresql.conf)
fi
if [ -f /usr/bin/python3 ]; then
  export PYTHON=/usr/bin/python3
else
  export PYTHON=/usr/bin/python
fi
if [ "${POSTGRESPORT}" == "" ]; then
  POSTGRESPORT="5432"
fi

${ACTION}
