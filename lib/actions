#!/bin/bash -e

get_info() {
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  echo -e "${PURPLEBOLD}                                    INFO                                         ${COLORCLEAR}"
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  if [ "${DISTRO}" == "centos6" ]; then
    INFO_RELEASE="$(cat /etc/redhat-release)"
    PKG_POSTGRES_SERVER_VER=$(rpm -qa postgresql${SHORTVER}-server|rev|cut -d '.' -f2,3-|cut -d '-' -f 1,2|rev)
    PKG_POSTGRES_DEV_VER=$(rpm -qa postgresql${SHORTVER}-devel|rev|cut -d '.' -f2,3-|cut -d '-' -f 1,2|rev)
    PKG_FREETDS_VER=$(rpm -qa freetds|rev|cut -d '.' -f2,3-|cut -d '-' -f 1,2|rev)
    PKG_FREETDS_DEV_VER=$(rpm -qa freetds-devel|rev|cut -d '.' -f2,3-|cut -d '-' -f 1,2|rev)
  elif [ "${DISTRO}" == "ubuntu14.04" ]; then
    INFO_RELEASE="$(cat /etc/debian_version)"
    PKG_POSTGRES_SERVER_VER=$(dpkg -s postgresql-${PG_VER}|grep '^Version:'|cut -d ' ' -f 2)
    PKG_POSTGRES_DEV_VER=$(dpkg -s postgresql-server-dev-${PG_VER}|grep '^Version:'|cut -d ' ' -f 2)
    PKG_FREETDS_VER=$(dpkg -s freetds-common|grep '^Version:'|cut -d ' ' -f 2)
    PKG_FREETDS_DEV_VER=$(dpkg -s freetds-dev|grep '^Version:'|cut -d ' ' -f 2)
  fi
  echo "DIST RELEASE: ${INFO_RELEASE}"
  echo "**** PACKAGE VERSIONS ****"
  echo "POSTGRESQL-SERVER: ${PKG_POSTGRES_SERVER_VER}"
  echo "POSTGRESQL-DEV:    ${PKG_POSTGRES_DEV_VER}"
  echo "FREETDS:           ${PKG_FREETDS_VER}"
  echo "FREETDS-DEV:       ${PKG_FREETDS_DEV_VER}"
}

mod_build() {
  cd ${TDSDIR}
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  echo -e "${PURPLEBOLD}                                  BUILDING                                       ${COLORCLEAR}"
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  PATH=${PGBIN_PATH}:${PATH} make USE_PGXS=1
}

mod_install() {
  cd ${TDSDIR}
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  echo -e "${PURPLEBOLD}                                 INSTALLING                                      ${COLORCLEAR}"
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  sudo PATH=${PGBIN_PATH}:${PATH} make USE_PGXS=1 install
}

pg_start() {
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  echo -e "${PURPLEBOLD}                       WAITING POSTGRESQL SERVICE START                          ${COLORCLEAR}"
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  if [ -z "${MAXRETRIES}" ]; then
    MAX_RETRIES=40
  fi
  if [ -z "${WAIT_SEC}" ]; then
    WAIT_SEC=5
  fi
  RETRIES=0
  echo "Checking if database engine is started..."
  set +e
  ${PGBIN_PATH}/psql -p ${POSTGRESPORT} -e -c 'SELECT version();' &> /dev/null
  while [ $? -eq 2 -a ${RETRIES} -lt ${MAX_RETRIES} ]; do
    echo "Database engine is starting up. Waiting ${WAIT_SEC} seconds..."
    sleep ${WAIT_SEC}
    let "RETRIES++"
    ${PGBIN_PATH}/psql -p ${POSTGRESPORT} -e -c 'SELECT version();' &> /dev/null
  done
  set -e
  if [ ${RETRIES} -eq ${MAX_RETRIES} ]; then
    echo "Can't connect to database engine after ${MAX_RETRIES} retries!"
    exit 1
  else
    echo "Database engine is started."
  fi
}

pg_confdb() {
  cd ${TDSDIR}
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  echo -e "${PURPLEBOLD}                       CONFIGURING DB AND LOADING EXTENSION                      ${COLORCLEAR}"
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  ${PGBIN_PATH}/psql -p ${POSTGRESPORT} -e -c 'SELECT version();'
  ${PGBIN_PATH}/psql -p ${POSTGRESPORT} -e -c "DROP DATABASE IF EXISTS ${POSTGRESDB};"
  ${PGBIN_PATH}/psql -p ${POSTGRESPORT} -e -c "CREATE DATABASE ${POSTGRESDB};"
  ${PGBIN_PATH}/psql -p ${POSTGRESPORT} -e -d ${POSTGRESDB} -c 'CREATE EXTENSION tds_fdw;'
  ${PGBIN_PATH}/psql -p ${POSTGRESPORT} -e -d ${POSTGRESDB} -c '\dx tds_fdw'
  ${PGBIN_PATH}/psql -p ${POSTGRESPORT} -e -d ${POSTGRESDB} -c "DROP USER IF EXISTS ${POSTGRESUSER};"
  ${PGBIN_PATH}/psql -p ${POSTGRESPORT} -e -d ${POSTGRESDB} -c "CREATE USER ${POSTGRESUSER} WITH PASSWORD '${POSTGRESPASS}';"
  ${PGBIN_PATH}/psql -p ${POSTGRESPORT} -e -d ${POSTGRESDB} -c "GRANT ALL PRIVILEGES ON DATABASE tds_fdw TO ${POSTGRESUSER};"
  ${PGBIN_PATH}/psql -p ${POSTGRESPORT} -e -d ${POSTGRESDB} -c "GRANT ALL ON FOREIGN DATA WRAPPER tds_fdw TO ${POSTGRESUSER};"
}

mssql_test() {
  cd ${TDSDIR}/tests
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  echo -e "${PURPLEBOLD}                                RUNNING MSSQL TESTS                              ${COLORCLEAR}"
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  PYTHONUNBUFFERED=True ./mssql-tests.py --server ${MSSQLHOST} --port ${MSSQLPORT} --database ${MSSQLDB} --username ${MSSQLUSER} --password ${MSSQLPASS} --schema "${MSSQLSCHEMA}" --azure
}

pg_test() {
  cd ${TDSDIR}/tests
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  echo -e "${PURPLEBOLD}                              RUNNING POSTGRESQL TESTS                           ${COLORCLEAR}"
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  POSTGRESHOST='127.0.0.1'
  PYTHONUNBUFFERED=True ./postgresql-tests.py --mssql_server ${MSSQLHOST} --mssql_port ${MSSQLPORT} --mssql_database tds_fdw_jenkins --mssql_username ${MSSQLUSER} --mssql_password ${MSSQLPASS} --mssql_schema ${MSSQLSCHEMA} --postgres_server ${POSTGRESHOST} --postgres_port ${POSTGRESPORT} --postgres_database ${POSTGRESDB} --postgres_username ${POSTGRESUSER} --postgres_password ${POSTGRESPASS} --postgres_schema ${POSTGRESSCHEMA} --azure
}

pg_dropdb() {
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  echo -e "${PURPLEBOLD}                                  DROPPING DB                                    ${COLORCLEAR}"
  echo -e "${PURPLEBOLD}=================================================================================${COLORCLEAR}"
  ${PGBIN_PATH}/psql -p ${POSTGRESPORT} -e -c "DROP DATABASE IF EXISTS ${POSTGRESDB};"
  ${PGBIN_PATH}/psql -p ${POSTGRESPORT} -e -c "DROP USER IF EXISTS ${POSTGRESUSER};"
}
